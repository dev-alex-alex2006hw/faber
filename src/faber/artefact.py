#
# Copyright (c) 2016 Stefan Seefeld
# All rights reserved.
#
# This file is part of Faber. It is made available under the
# Boost Software License, Version 1.0.
# (Consult LICENSE or http://www.boost.org/LICENSE_1_0.txt)

from os.path import normpath, join
from collections import defaultdict
import string

intermediate= 0x0001
nocare=       0x0002
notfile=      0x0004
always=       0x0008
leaves=       0x0010
noupdate=     0x0020
rmold=        0x0080
xfail=        0x0100
isfile=       0x0400
precious=     0x0800

class artefact(object):
    """An artefact can be generated by a build."""

    # reverse lookup: finding an artefact from its bound name...
    _bnames = {}
    # ...and its qname. (Note that multiple artefact may use the
    # same qname (if they have different features).
    _qnames = defaultdict(list)

    def register(self):
        artefact._bnames[self.bound_name] = self
        artefact._qnames[self.qname].append(self)

    @staticmethod
    def iter():
        """Iterate over all registered artefacts."""

        # iterate grouped by qname
        return iter(a for qname in artefact._qnames.values() for a in qname)

    @staticmethod
    def lookup(qname):
        """Find an artefact by (qualified) name."""

        if qname not in artefact._qnames:
            raise KeyError(qname)
        else:
            return artefact._qnames[qname]

    def __init__(self, name, sources=None, attrs=0):
        # for convenience, accept 'sources' to be a list or a single string
        sources = sources if type(sources) is list else [sources]

        self.name = name
        # import here to avoid circular dependency
        from .module import module
        self.module = module.current
        self.qname = self.module.qname(self.name)
        self.sources = sources
        self.attrs = attrs
        if not self.attrs & notfile:
            self.filename = join(self.module.builddir, self.name)

    @property
    def bound_name(self):
        return self.qname if self.attrs & notfile else self.filename

    def __repr__(self):
        return '<artefact {}>'.format(self.name)
